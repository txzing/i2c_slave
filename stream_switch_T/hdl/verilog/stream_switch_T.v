// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream_switch_T_stream_switch_T,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=0.698000,HLS_SYN_LAT=1,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=59,HLS_VERSION=2020_1}" *)

module stream_switch_T (
        s_axis_video_TDATA,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m0_axis_video_TDATA,
        m0_axis_video_TKEEP,
        m0_axis_video_TSTRB,
        m0_axis_video_TUSER,
        m0_axis_video_TLAST,
        m0_axis_video_TID,
        m0_axis_video_TDEST,
        m1_axis_video_TDATA,
        m1_axis_video_TKEEP,
        m1_axis_video_TSTRB,
        m1_axis_video_TUSER,
        m1_axis_video_TLAST,
        m1_axis_video_TID,
        m1_axis_video_TDEST,
        ap_clk,
        ap_rst_n,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        m0_axis_video_TVALID,
        m0_axis_video_TREADY,
        m1_axis_video_TVALID,
        m1_axis_video_TREADY
);


input  [15:0] s_axis_video_TDATA;
input  [1:0] s_axis_video_TKEEP;
input  [1:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [9:0] s_axis_video_TDEST;
output  [15:0] m0_axis_video_TDATA;
output  [1:0] m0_axis_video_TKEEP;
output  [1:0] m0_axis_video_TSTRB;
output  [0:0] m0_axis_video_TUSER;
output  [0:0] m0_axis_video_TLAST;
output  [0:0] m0_axis_video_TID;
output  [0:0] m0_axis_video_TDEST;
output  [15:0] m1_axis_video_TDATA;
output  [1:0] m1_axis_video_TKEEP;
output  [1:0] m1_axis_video_TSTRB;
output  [0:0] m1_axis_video_TUSER;
output  [0:0] m1_axis_video_TLAST;
output  [0:0] m1_axis_video_TID;
output  [0:0] m1_axis_video_TDEST;
input   ap_clk;
input   ap_rst_n;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
output   m0_axis_video_TVALID;
input   m0_axis_video_TREADY;
output   m1_axis_video_TVALID;
input   m1_axis_video_TREADY;

 reg    ap_rst_n_inv;
wire    Block_split66_proc3_U0_ap_start;
wire    Block_split66_proc3_U0_ap_done;
wire    Block_split66_proc3_U0_ap_continue;
wire    Block_split66_proc3_U0_ap_idle;
wire    Block_split66_proc3_U0_ap_ready;
wire    Block_split66_proc3_U0_s_axis_video_TREADY;
wire   [15:0] Block_split66_proc3_U0_m0_axis_video_TDATA;
wire    Block_split66_proc3_U0_m0_axis_video_TVALID;
wire   [1:0] Block_split66_proc3_U0_m0_axis_video_TKEEP;
wire   [1:0] Block_split66_proc3_U0_m0_axis_video_TSTRB;
wire   [0:0] Block_split66_proc3_U0_m0_axis_video_TUSER;
wire   [0:0] Block_split66_proc3_U0_m0_axis_video_TLAST;
wire   [0:0] Block_split66_proc3_U0_m0_axis_video_TID;
wire   [0:0] Block_split66_proc3_U0_m0_axis_video_TDEST;
wire   [15:0] Block_split66_proc3_U0_m1_axis_video_TDATA;
wire    Block_split66_proc3_U0_m1_axis_video_TVALID;
wire   [1:0] Block_split66_proc3_U0_m1_axis_video_TKEEP;
wire   [1:0] Block_split66_proc3_U0_m1_axis_video_TSTRB;
wire   [0:0] Block_split66_proc3_U0_m1_axis_video_TUSER;
wire   [0:0] Block_split66_proc3_U0_m1_axis_video_TLAST;
wire   [0:0] Block_split66_proc3_U0_m1_axis_video_TID;
wire   [0:0] Block_split66_proc3_U0_m1_axis_video_TDEST;
wire    ap_sync_continue;
wire    Block_split66_proc3_U0_start_full_n;
wire    Block_split66_proc3_U0_start_write;

stream_switch_T_Block_split66_proc3 Block_split66_proc3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_split66_proc3_U0_ap_start),
    .ap_done(Block_split66_proc3_U0_ap_done),
    .ap_continue(Block_split66_proc3_U0_ap_continue),
    .ap_idle(Block_split66_proc3_U0_ap_idle),
    .ap_ready(Block_split66_proc3_U0_ap_ready),
    .s_axis_video_TDATA(s_axis_video_TDATA),
    .s_axis_video_TVALID(s_axis_video_TVALID),
    .s_axis_video_TREADY(Block_split66_proc3_U0_s_axis_video_TREADY),
    .s_axis_video_TKEEP(s_axis_video_TKEEP),
    .s_axis_video_TSTRB(s_axis_video_TSTRB),
    .s_axis_video_TUSER(s_axis_video_TUSER),
    .s_axis_video_TLAST(s_axis_video_TLAST),
    .s_axis_video_TID(s_axis_video_TID),
    .s_axis_video_TDEST(s_axis_video_TDEST),
    .m0_axis_video_TDATA(Block_split66_proc3_U0_m0_axis_video_TDATA),
    .m0_axis_video_TVALID(Block_split66_proc3_U0_m0_axis_video_TVALID),
    .m0_axis_video_TREADY(m0_axis_video_TREADY),
    .m0_axis_video_TKEEP(Block_split66_proc3_U0_m0_axis_video_TKEEP),
    .m0_axis_video_TSTRB(Block_split66_proc3_U0_m0_axis_video_TSTRB),
    .m0_axis_video_TUSER(Block_split66_proc3_U0_m0_axis_video_TUSER),
    .m0_axis_video_TLAST(Block_split66_proc3_U0_m0_axis_video_TLAST),
    .m0_axis_video_TID(Block_split66_proc3_U0_m0_axis_video_TID),
    .m0_axis_video_TDEST(Block_split66_proc3_U0_m0_axis_video_TDEST),
    .m1_axis_video_TDATA(Block_split66_proc3_U0_m1_axis_video_TDATA),
    .m1_axis_video_TVALID(Block_split66_proc3_U0_m1_axis_video_TVALID),
    .m1_axis_video_TREADY(m1_axis_video_TREADY),
    .m1_axis_video_TKEEP(Block_split66_proc3_U0_m1_axis_video_TKEEP),
    .m1_axis_video_TSTRB(Block_split66_proc3_U0_m1_axis_video_TSTRB),
    .m1_axis_video_TUSER(Block_split66_proc3_U0_m1_axis_video_TUSER),
    .m1_axis_video_TLAST(Block_split66_proc3_U0_m1_axis_video_TLAST),
    .m1_axis_video_TID(Block_split66_proc3_U0_m1_axis_video_TID),
    .m1_axis_video_TDEST(Block_split66_proc3_U0_m1_axis_video_TDEST)
);

assign Block_split66_proc3_U0_ap_continue = 1'b1;

assign Block_split66_proc3_U0_ap_start = 1'b1;

assign Block_split66_proc3_U0_start_full_n = 1'b1;

assign Block_split66_proc3_U0_start_write = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign m0_axis_video_TDATA = Block_split66_proc3_U0_m0_axis_video_TDATA;

assign m0_axis_video_TDEST = Block_split66_proc3_U0_m0_axis_video_TDEST;

assign m0_axis_video_TID = Block_split66_proc3_U0_m0_axis_video_TID;

assign m0_axis_video_TKEEP = Block_split66_proc3_U0_m0_axis_video_TKEEP;

assign m0_axis_video_TLAST = Block_split66_proc3_U0_m0_axis_video_TLAST;

assign m0_axis_video_TSTRB = Block_split66_proc3_U0_m0_axis_video_TSTRB;

assign m0_axis_video_TUSER = Block_split66_proc3_U0_m0_axis_video_TUSER;

assign m0_axis_video_TVALID = Block_split66_proc3_U0_m0_axis_video_TVALID;

assign m1_axis_video_TDATA = Block_split66_proc3_U0_m1_axis_video_TDATA;

assign m1_axis_video_TDEST = Block_split66_proc3_U0_m1_axis_video_TDEST;

assign m1_axis_video_TID = Block_split66_proc3_U0_m1_axis_video_TID;

assign m1_axis_video_TKEEP = Block_split66_proc3_U0_m1_axis_video_TKEEP;

assign m1_axis_video_TLAST = Block_split66_proc3_U0_m1_axis_video_TLAST;

assign m1_axis_video_TSTRB = Block_split66_proc3_U0_m1_axis_video_TSTRB;

assign m1_axis_video_TUSER = Block_split66_proc3_U0_m1_axis_video_TUSER;

assign m1_axis_video_TVALID = Block_split66_proc3_U0_m1_axis_video_TVALID;

assign s_axis_video_TREADY = Block_split66_proc3_U0_s_axis_video_TREADY;

endmodule //stream_switch_T
