// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_switch_T_Block_split66_proc3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m0_axis_video_TDATA,
        m0_axis_video_TVALID,
        m0_axis_video_TREADY,
        m0_axis_video_TKEEP,
        m0_axis_video_TSTRB,
        m0_axis_video_TUSER,
        m0_axis_video_TLAST,
        m0_axis_video_TID,
        m0_axis_video_TDEST,
        m1_axis_video_TDATA,
        m1_axis_video_TVALID,
        m1_axis_video_TREADY,
        m1_axis_video_TKEEP,
        m1_axis_video_TSTRB,
        m1_axis_video_TUSER,
        m1_axis_video_TLAST,
        m1_axis_video_TID,
        m1_axis_video_TDEST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [1:0] s_axis_video_TKEEP;
input  [1:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [9:0] s_axis_video_TDEST;
output  [15:0] m0_axis_video_TDATA;
output   m0_axis_video_TVALID;
input   m0_axis_video_TREADY;
output  [1:0] m0_axis_video_TKEEP;
output  [1:0] m0_axis_video_TSTRB;
output  [0:0] m0_axis_video_TUSER;
output  [0:0] m0_axis_video_TLAST;
output  [0:0] m0_axis_video_TID;
output  [0:0] m0_axis_video_TDEST;
output  [15:0] m1_axis_video_TDATA;
output   m1_axis_video_TVALID;
input   m1_axis_video_TREADY;
output  [1:0] m1_axis_video_TKEEP;
output  [1:0] m1_axis_video_TSTRB;
output  [0:0] m1_axis_video_TUSER;
output  [0:0] m1_axis_video_TLAST;
output  [0:0] m1_axis_video_TID;
output  [0:0] m1_axis_video_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s_axis_video_TDATA_blk_n;
reg    m0_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [9:0] tmp_dest_V_reg_182;
reg    m1_axis_video_TDATA_blk_n;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire    regslice_both_m0_axis_video_V_data_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_data_V_U_apdone_blk;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [15:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [1:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [1:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [9:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
reg    m0_axis_video_TVALID_int_regslice;
wire    m0_axis_video_TREADY_int_regslice;
wire    regslice_both_m0_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m0_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m0_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m0_axis_video_V_dest_V_U_vld_out;
reg    m1_axis_video_TVALID_int_regslice;
wire    m1_axis_video_TREADY_int_regslice;
wire    regslice_both_m1_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m1_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m1_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m1_axis_video_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 10 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_m0_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA_int_regslice),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(m0_axis_video_TREADY_int_regslice),
    .data_out(m0_axis_video_TDATA),
    .vld_out(regslice_both_m0_axis_video_V_data_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_m0_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(2'd0),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TKEEP),
    .vld_out(regslice_both_m0_axis_video_V_keep_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_m0_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(2'd0),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TSTRB),
    .vld_out(regslice_both_m0_axis_video_V_strb_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m0_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER_int_regslice),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TUSER),
    .vld_out(regslice_both_m0_axis_video_V_user_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m0_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST_int_regslice),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TLAST),
    .vld_out(regslice_both_m0_axis_video_V_last_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m0_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TID),
    .vld_out(regslice_both_m0_axis_video_V_id_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m0_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m0_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m0_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m0_axis_video_TDEST),
    .vld_out(regslice_both_m0_axis_video_V_dest_V_U_vld_out),
    .ack_out(m0_axis_video_TREADY),
    .apdone_blk(regslice_both_m0_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_m1_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA_int_regslice),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(m1_axis_video_TREADY_int_regslice),
    .data_out(m1_axis_video_TDATA),
    .vld_out(regslice_both_m1_axis_video_V_data_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_m1_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(2'd0),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TKEEP),
    .vld_out(regslice_both_m1_axis_video_V_keep_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_m1_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(2'd0),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TSTRB),
    .vld_out(regslice_both_m1_axis_video_V_strb_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m1_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER_int_regslice),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TUSER),
    .vld_out(regslice_both_m1_axis_video_V_user_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m1_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST_int_regslice),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TLAST),
    .vld_out(regslice_both_m1_axis_video_V_last_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m1_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TID),
    .vld_out(regslice_both_m1_axis_video_V_id_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m1_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m1_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_m1_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m1_axis_video_TDEST),
    .vld_out(regslice_both_m1_axis_video_V_dest_V_U_vld_out),
    .ack_out(m1_axis_video_TREADY),
    .apdone_blk(regslice_both_m1_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state2_io) | (regslice_both_m1_axis_video_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_m0_axis_video_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_dest_V_reg_182 <= s_axis_video_TDEST_int_regslice;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_m1_axis_video_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_m0_axis_video_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_m1_axis_video_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_m0_axis_video_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_dest_V_reg_182 == 10'd704) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (s_axis_video_TDEST_int_regslice == 10'd704) & (1'b1 == ap_CS_fsm_state1)))) begin
        m0_axis_video_TDATA_blk_n = m0_axis_video_TREADY_int_regslice;
    end else begin
        m0_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1)) & (s_axis_video_TDEST_int_regslice == 10'd704) & (1'b1 == ap_CS_fsm_state1))) begin
        m0_axis_video_TVALID_int_regslice = 1'b1;
    end else begin
        m0_axis_video_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_dest_V_reg_182 == 10'd705) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (s_axis_video_TDEST_int_regslice == 10'd705) & (1'b1 == ap_CS_fsm_state1)))) begin
        m1_axis_video_TDATA_blk_n = m1_axis_video_TREADY_int_regslice;
    end else begin
        m1_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1)) & (s_axis_video_TDEST_int_regslice == 10'd705) & (1'b1 == ap_CS_fsm_state1))) begin
        m1_axis_video_TVALID_int_regslice = 1'b1;
    end else begin
        m1_axis_video_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int_regslice;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_axis_video_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (regslice_both_m1_axis_video_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_m0_axis_video_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (s_axis_video_TVALID_int_regslice == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_io = (((s_axis_video_TDEST_int_regslice == 10'd705) & (m1_axis_video_TREADY_int_regslice == 1'b0)) | ((s_axis_video_TDEST_int_regslice == 10'd704) & (m0_axis_video_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_m1_axis_video_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_m0_axis_video_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state2_io = (((tmp_dest_V_reg_182 == 10'd705) & (m1_axis_video_TREADY_int_regslice == 1'b0)) | ((tmp_dest_V_reg_182 == 10'd704) & (m0_axis_video_TREADY_int_regslice == 1'b0)));
end

assign m0_axis_video_TVALID = regslice_both_m0_axis_video_V_data_V_U_vld_out;

assign m1_axis_video_TVALID = regslice_both_m1_axis_video_V_data_V_U_vld_out;

assign s_axis_video_TREADY = regslice_both_s_axis_video_V_data_V_U_ack_in;

endmodule //stream_switch_T_Block_split66_proc3
