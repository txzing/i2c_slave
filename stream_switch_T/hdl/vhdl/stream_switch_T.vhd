-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream_switch_T is
port (
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (9 downto 0);
    m0_axis_video_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m0_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m0_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m0_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m0_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m0_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m0_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m1_axis_video_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m1_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m1_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m1_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m1_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m1_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m1_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    m0_axis_video_TVALID : OUT STD_LOGIC;
    m0_axis_video_TREADY : IN STD_LOGIC;
    m1_axis_video_TVALID : OUT STD_LOGIC;
    m1_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of stream_switch_T is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream_switch_T_stream_switch_T,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=0.698000,HLS_SYN_LAT=1,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=59,HLS_VERSION=2020_1}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal Block_split66_proc3_U0_ap_start : STD_LOGIC;
    signal Block_split66_proc3_U0_ap_done : STD_LOGIC;
    signal Block_split66_proc3_U0_ap_continue : STD_LOGIC;
    signal Block_split66_proc3_U0_ap_idle : STD_LOGIC;
    signal Block_split66_proc3_U0_ap_ready : STD_LOGIC;
    signal Block_split66_proc3_U0_s_axis_video_TREADY : STD_LOGIC;
    signal Block_split66_proc3_U0_m0_axis_video_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TVALID : STD_LOGIC;
    signal Block_split66_proc3_U0_m0_axis_video_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m0_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TVALID : STD_LOGIC;
    signal Block_split66_proc3_U0_m1_axis_video_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split66_proc3_U0_m1_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal Block_split66_proc3_U0_start_full_n : STD_LOGIC;
    signal Block_split66_proc3_U0_start_write : STD_LOGIC;

    component stream_switch_T_Block_split66_proc3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (9 downto 0);
        m0_axis_video_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m0_axis_video_TVALID : OUT STD_LOGIC;
        m0_axis_video_TREADY : IN STD_LOGIC;
        m0_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        m0_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m0_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m0_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m0_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m0_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m1_axis_video_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m1_axis_video_TVALID : OUT STD_LOGIC;
        m1_axis_video_TREADY : IN STD_LOGIC;
        m1_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        m1_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m1_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m1_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m1_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m1_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Block_split66_proc3_U0 : component stream_switch_T_Block_split66_proc3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split66_proc3_U0_ap_start,
        ap_done => Block_split66_proc3_U0_ap_done,
        ap_continue => Block_split66_proc3_U0_ap_continue,
        ap_idle => Block_split66_proc3_U0_ap_idle,
        ap_ready => Block_split66_proc3_U0_ap_ready,
        s_axis_video_TDATA => s_axis_video_TDATA,
        s_axis_video_TVALID => s_axis_video_TVALID,
        s_axis_video_TREADY => Block_split66_proc3_U0_s_axis_video_TREADY,
        s_axis_video_TKEEP => s_axis_video_TKEEP,
        s_axis_video_TSTRB => s_axis_video_TSTRB,
        s_axis_video_TUSER => s_axis_video_TUSER,
        s_axis_video_TLAST => s_axis_video_TLAST,
        s_axis_video_TID => s_axis_video_TID,
        s_axis_video_TDEST => s_axis_video_TDEST,
        m0_axis_video_TDATA => Block_split66_proc3_U0_m0_axis_video_TDATA,
        m0_axis_video_TVALID => Block_split66_proc3_U0_m0_axis_video_TVALID,
        m0_axis_video_TREADY => m0_axis_video_TREADY,
        m0_axis_video_TKEEP => Block_split66_proc3_U0_m0_axis_video_TKEEP,
        m0_axis_video_TSTRB => Block_split66_proc3_U0_m0_axis_video_TSTRB,
        m0_axis_video_TUSER => Block_split66_proc3_U0_m0_axis_video_TUSER,
        m0_axis_video_TLAST => Block_split66_proc3_U0_m0_axis_video_TLAST,
        m0_axis_video_TID => Block_split66_proc3_U0_m0_axis_video_TID,
        m0_axis_video_TDEST => Block_split66_proc3_U0_m0_axis_video_TDEST,
        m1_axis_video_TDATA => Block_split66_proc3_U0_m1_axis_video_TDATA,
        m1_axis_video_TVALID => Block_split66_proc3_U0_m1_axis_video_TVALID,
        m1_axis_video_TREADY => m1_axis_video_TREADY,
        m1_axis_video_TKEEP => Block_split66_proc3_U0_m1_axis_video_TKEEP,
        m1_axis_video_TSTRB => Block_split66_proc3_U0_m1_axis_video_TSTRB,
        m1_axis_video_TUSER => Block_split66_proc3_U0_m1_axis_video_TUSER,
        m1_axis_video_TLAST => Block_split66_proc3_U0_m1_axis_video_TLAST,
        m1_axis_video_TID => Block_split66_proc3_U0_m1_axis_video_TID,
        m1_axis_video_TDEST => Block_split66_proc3_U0_m1_axis_video_TDEST);




    Block_split66_proc3_U0_ap_continue <= ap_const_logic_1;
    Block_split66_proc3_U0_ap_start <= ap_const_logic_1;
    Block_split66_proc3_U0_start_full_n <= ap_const_logic_1;
    Block_split66_proc3_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    m0_axis_video_TDATA <= Block_split66_proc3_U0_m0_axis_video_TDATA;
    m0_axis_video_TDEST <= Block_split66_proc3_U0_m0_axis_video_TDEST;
    m0_axis_video_TID <= Block_split66_proc3_U0_m0_axis_video_TID;
    m0_axis_video_TKEEP <= Block_split66_proc3_U0_m0_axis_video_TKEEP;
    m0_axis_video_TLAST <= Block_split66_proc3_U0_m0_axis_video_TLAST;
    m0_axis_video_TSTRB <= Block_split66_proc3_U0_m0_axis_video_TSTRB;
    m0_axis_video_TUSER <= Block_split66_proc3_U0_m0_axis_video_TUSER;
    m0_axis_video_TVALID <= Block_split66_proc3_U0_m0_axis_video_TVALID;
    m1_axis_video_TDATA <= Block_split66_proc3_U0_m1_axis_video_TDATA;
    m1_axis_video_TDEST <= Block_split66_proc3_U0_m1_axis_video_TDEST;
    m1_axis_video_TID <= Block_split66_proc3_U0_m1_axis_video_TID;
    m1_axis_video_TKEEP <= Block_split66_proc3_U0_m1_axis_video_TKEEP;
    m1_axis_video_TLAST <= Block_split66_proc3_U0_m1_axis_video_TLAST;
    m1_axis_video_TSTRB <= Block_split66_proc3_U0_m1_axis_video_TSTRB;
    m1_axis_video_TUSER <= Block_split66_proc3_U0_m1_axis_video_TUSER;
    m1_axis_video_TVALID <= Block_split66_proc3_U0_m1_axis_video_TVALID;
    s_axis_video_TREADY <= Block_split66_proc3_U0_s_axis_video_TREADY;
end behav;
